1. Just add spring-boot-security we get a login page without configuring anything
2. We can get password generated in console
3. default username is user
4. For logout go to localhost:8080/logout

Basic Auth****->

Client                                          Server

        ---------------GET REQ----------------->
        <-------------401 Unauthorized----------

        ---GET REQ | Base 64 username:password-->
        <----------------200 ok------------------

Have to send username/password in every req, no logout since user/password sent in every req
In headers: Key value as Authorization: Basic (username,password in base 64)

Whitelist some urls-> ant matchers


Creating Users->
currently username:user and password: random uid stored in an inmemory database

Username
Password(must be encoded)
Role/s (ROLE_NAME)
Authorities/Permissions?
and more...

Roles -> High level view of all the users that we have in the system
For a specific user we assign a role and then we have permissions/authorities

Role: ADMIN,
and withing a role we have a set of permissions a role has
ie. STUDENT:READ, STUDENT:WRITE, COURSES:READ, COURSES:WRITE

Role: STUDENT,
and withing a role we have a set of permissions a role has
ie. STUDENT:READ, STUDENT:WRITE, COURSES:READ
doesn't have COURSE:WRITE

* We can assign multiple ROLES for a USER each ROLE has a set of permissions

Using ENUMS to define roles and permissions

Role based permission: In our example we protect /api/(anything) from admin role, we allow only student role to access that api

We now define 2 Roles: Admin and Admin Trainee
Admin will have read,write access to management/api/v1/students
Admin Trainee will only have read access to management/api/v1/students

Spring security not allowing post,put,delete forbidden so we disable csrf for now

Permission based on Authority/Permissions: hasAuthority()
2 ways-> using ant matchers or using annotations in the method itself

Role/Permission stored internally as SimpleGrantedAuthority, they are same
Role is stored as ROLE_${name} internally that's the only diff

*Order does matter in defining ant matchers

Permission based authentication using annotations: @PreAuthorize
Add this annotation to our ApplicationSecurityConfig class to enable above annotation @EnableGlobalMethodSecurity(prePostEnabled = true)

CSRF-> Cross Site Request Forgery
How csrf works?
When client logins, server sends csrf token along with cookies, now the next time client makes a form req(post|put|delete)
client submit form with that token, then the server verifies if the token client sent is legit or not.

Our requests failing right now because we haven't set up csrf

We setup csrf now and make WithHttpOnlyFalse by default it's true

We can now see if we make a GET req we are getting XSRF-TOKEN

Now in POST req if we include X-XSRF-TOKEN:{token-value} in headers we will see POST Req will be successful now

When to use csrf: https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html

Form Based Authentication****->
-Username and password
-Forms(Full control)
-Can logout


Client                                                        Server
        -------------Post username/password---------------->

        <----------Ok after validating credentials----------

        <-------------Cookie SESSIONID----------------------

        -----------Any request with SESSIONID--------------->

        <------200 OK after validating SESSIONID------------- SESSIONID Stored in a DB on Server


    Cookie: JSESSIONID stored under Cookies in Chrome if we delete it we get logged out
    or you can logout by going to localhost:8080/logout

By default SESSIONID expires after 30mins of inactivity,
By remember me option we can extend this
.rememberMe(); //defaults to 2 weeks

We now have a second cookie named as remember-me if we select remember me option
It contains: username,expiration time, md5 hash of the above 2 values

Logout:
Go to /logout for logging out, we send the JSESSIONID and remember-me cookie as request to clear them from db

Best practice to use post req for logout but since we have disabled csrf we have to GET

In login.html we have the form with fields name as
username,password,remember-me
We can change them as .passwordParameter("anything") and then change it in our form

DB Authentication Overview->
Store users in database instead of inmemory database

Add ApplicationUserClass
Now use this class to create users instead of user builder

Add our UserDetailsService to fetch users from DB

Add ApplicationUserDao
Dao-> data access object
interface for accessing db

Not create a class that implements this ApplicationUserDao (FakeApplicationUserDaoService) which is repository

ApplicationUser-> Class that implements UserDetails which we user to store users in a particular format
UserDetailsService-> To load users ie. business logic
ApplicationUserDao(Repository)-> Direct interaction with DB
FakeApplicationUserDaoService-> Implements the above

@Qualifier("fake") to let it know for autowiring which implementation of interface to inject during autowiring

Make a DaoAuthenticationProvider and set our UserDetailsService and passwordEncoder

Then override configure method and set authenticationProvider as daoAuthenticationProvider

JWT

                     Android app
                        |
                        |
                        |
Ios App  --------- Authentication Server ------- 3rd party app
                        |
                        |
                        |
                      WebApp


JSON Web Token
+ Fast, as they are stateless(don't need to store in db)
+ Used across many services

- Compromised secret key
- No visibility to logged in users
- Token can be stolen


Client                                          Server

        -------Sends credentials----------->
                                             Validates credentials and creates and signs token
        <-----------Sends token-------------

        -------Sends token for each req---->        Validates token


JWT Token consists of
HEADER-> consists info about type of algorithm used
BODY(CLAIMS)-> consists of user data
256-bit-secret

To verify signature we use combination of 3 to verify

Documentation: https://github.com/jwtk/jjwt#jws

